import BinaryInput.dzn;
import BinaryOutput.dzn;
import Register.dzn;

interface ISerialProtocol
{
  extern integer $int$;
  
  in void enable(integer input_port, integer output_port);
  in void disable();
  in void startRetrieveValue();
  in void stopRetrieveValue();  
  out void valueAvailable(integer newValue);
    
  behaviour
  {
    enum OperationalState { Disabled, Enabled};
    OperationalState operationalState = OperationalState.Disabled; 
  
    [operationalState.Disabled]
    {
      on enable:{operationalState = OperationalState.Enabled;}
      on disable:illegal;    
      on startRetrieveValue:illegal;
      on stopRetrieveValue:illegal;
    }  
    [operationalState.Enabled]
    {
      on enable:illegal;      
      on disable:{operationalState = OperationalState.Disabled;}
      on startRetrieveValue:{}       
      on stopRetrieveValue:{}
      on optional: valueAvailable;
    }
  }
}

component SerialProtocol
{
  provides ISerialProtocol serialProtocol;
  requires ILogicalBinaryInput  input;
  requires ILogicalBinaryOutput output;
  requires IRegister register;
  
  behaviour
  {
    enum State {Enabled, Disabled, WaitForDataAvailable, ReadingData};
    State state = State.Disabled;
    [state.Disabled]
    {
      on serialProtocol.enable(input_port, output_port): 
      {
        InitializePorts(input_port, output_port);
        state = State.Enabled;
      }
    }
    [state.Enabled]
    {
      on serialProtocol.disable(): Disable(); 
      on input.fallingEdge(): {output.reset();} 
      on input.risingEdge(): {output.set();}
      on serialProtocol.startRetrieveValue():
      {
        output.reset();        
        register.initialize(); 
        state = State.WaitForDataAvailable;
      }    
      on serialProtocol.stopRetrieveValue():{register.terminate();}     
    }
    [state.WaitForDataAvailable]
    {
      on serialProtocol.disable(): Disable();      
      on serialProtocol.stopRetrieveValue():
      {
        register.terminate();
        state = State.Enabled;
      }    
      on serialProtocol.startRetrieveValue():{}  
      on input.fallingEdge():
      {              
        generateClockTick();
        ILogicalBinaryInput.LogicalState inputState = input.readCurrentState(); 
        updateRegister(inputState);
        state = State.ReadingData;
      }
      on input.risingEdge(): {}      
    }
    [state.ReadingData]
    {
      on register.bitWritten():
      {        
        register.prepareForNextBit();
        generateClockTick();
        ILogicalBinaryInput.LogicalState inputState = input.readCurrentState(); 
        updateRegister(inputState);        
      }
      on register.lastBitWritten(value):
      {        
        generateClockTick();
        serialProtocol.valueAvailable(value);
        register.terminate();        
        state = State.Enabled;
      }      
      on input.fallingEdge(): {}
      on input.risingEdge(): {}
      on serialProtocol.stopRetrieveValue():{register.terminate();state = State.Enabled;}
      on serialProtocol.disable(): Disable();
    }

    void InitializePorts(ILogicalBinaryInput.PortNr input_port, ILogicalBinaryOutput.PortNr output_port)
    {
      ILogicalBinaryInput.LogicalState localState = input.initialize(input_port);
      output.initLow(output_port);        
      state = State.Enabled;
    }   
    
    void generateClockTick()
    {
      output.set();
      output.reset();
    }
    
    void updateRegister(ILogicalBinaryInput.LogicalState state)
    {     
      if (state == ILogicalBinaryInput.LogicalState.High)
      {
        register.setLSB();
      }
      else
      {
        register.resetLSB();          
      }      
    }
    void Disable()
    {
        input.terminate(); 
        output.terminate(); 
        register.terminate();        
        state = State.Disabled;      
    }
  }  
}

