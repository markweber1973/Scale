 interface IHardwareBinaryOutput
{   
  enum BinaryState { High, Low };
  extern  PortNr $int$;
    
  in void set(PortNr port_nr);
  in void reset(PortNr port_nr);   	
  
  behaviour
  {
    on set: {}		
    on reset: {}       
  }
}

enum LogicalState { High, Low, NotInitialised};

interface ILogicalBinaryOutput 
{      
  extern PortNr $int$;  
  in void initHigh(PortNr port_nr);    
  in void initLow(PortNr port_nr);  
  in void terminate();  
  in void set();
  in void reset();     

  behaviour
  {
    enum OperationalState { NotInitialised, Initialised};
    OperationalState operationalState = OperationalState.NotInitialised; 
    [operationalState.NotInitialised]
    {
      on initLow: {operationalState = OperationalState.Initialised;}      
      on initHigh: {operationalState = OperationalState.Initialised;}
     
      on terminate: illegal;
      on set: illegal;                       
      on reset: illegal;
    }
    [operationalState.Initialised]
    {
      on initLow: illegal;
      on initHigh: illegal;      
      on terminate: {operationalState = OperationalState.NotInitialised;}
      on set: {}                 
      on reset: {}
    }       
  }
}

component LogicalBinaryOutput
{ 
  requires IHardwareBinaryOutput hardwareBinaryOutput;
  provides ILogicalBinaryOutput  logicalBinaryOutput;
  
  behaviour
  {
    LogicalState state = LogicalState.NotInitialised;
    ILogicalBinaryOutput.PortNr output_nr;
    [state.NotInitialised]
    {
      on logicalBinaryOutput.set(): illegal;
      on logicalBinaryOutput.reset(): illegal;
      on logicalBinaryOutput.terminate(): illegal;
      on logicalBinaryOutput.initHigh(port_nr): {output_nr = port_nr; initHigh();}      
      on logicalBinaryOutput.initLow(port_nr):  {output_nr = port_nr; initLow();}      
    }
    [state.High]
    {
      on logicalBinaryOutput.set(): {}
      on logicalBinaryOutput.reset(): {hardwareBinaryOutput.reset(output_nr); state=LogicalState.Low;}
      on logicalBinaryOutput.terminate(): state=LogicalState.NotInitialised;      
      on logicalBinaryOutput.initHigh(port_nr): illegal;
      on logicalBinaryOutput.initLow(port_nr): illegal;      
    }
    [state.Low]
    {
      on logicalBinaryOutput.set(): {hardwareBinaryOutput.set(output_nr); state=LogicalState.High;}
      on logicalBinaryOutput.reset(): {}
      on logicalBinaryOutput.terminate(): state=LogicalState.NotInitialised;      
      on logicalBinaryOutput.initHigh(port_nr): illegal;
      on logicalBinaryOutput.initLow(port_nr): illegal;      
                  
    }

    void initHigh()
    {     
      hardwareBinaryOutput.set(output_nr);
      state = LogicalState.High;        
    }    

    void initLow()
    {
      hardwareBinaryOutput.reset(output_nr);
      state = LogicalState.Low;        
    }    
    
  } 
}


