interface IRegister
{
  extern integer $int$;  
   
  in void initialize();
  in void terminate();  
  in void setLSB();  
  in void resetLSB();
  in void prepareForNextBit();  
  out void value(integer theVal);
  out void bitWritten();
  out void lastBitWritten(integer theVal);  

  behaviour
  {
    enum State {Idle, NoBitsWritten, BitsWritten};
    subint BitNumbers {0..3};    
    State state = State.Idle;    
    BitNumbers bitNumber = 0;   

    [state.Idle]
    {
      on setLSB:illegal;  
      on resetLSB:illegal;
      on prepareForNextBit:illegal;      
      on initialize:{resetBitNumber(); state = State.NoBitsWritten;}      
      on terminate:{}      
    }
    [state.NoBitsWritten]
    {
      on setLSB:{incrementBitNumber();}  
      on resetLSB:{incrementBitNumber();}      
      on prepareForNextBit:illegal;      
      on initialize: illegal;
      on terminate:{state = State.Idle;}
    }
    [state.BitsWritten]
    {
      on setLSB:{incrementBitNumber();}  
      on resetLSB:{incrementBitNumber();}
           
      on prepareForNextBit:{} 
      on initialize: illegal;
      on terminate:{state = State.Idle;}      
    }
    
    void resetBitNumber()
    {
      bitNumber = 0;
    }

    void incrementBitNumber()    
    {
      if (bitNumber == 3)
      {       
        lastBitWritten;
        state = State.Idle;        
      }
      else
      {        
        bitWritten;
        bitNumber = bitNumber + 1;        
        state = State.BitsWritten;        
      }
    }
    
  }  
}