import SerialProtocolSystem.dzn;
import Timer.dzn;
import Display.dzn;
import ScaleSystemProperties.dzn;

interface IScaleSystem
{
  in void enable();
  in void disable();
  
  behaviour
  {
    enum State {Disabled, Enabled};
   
    State state = State.Disabled;
    [state.Disabled]
    {
      on enable: state = State.Enabled;
      on disable: {}
    }
    [state.Enabled]
    {
      on enable: illegal;
      on disable: state = State.Disabled;
    }
  }  
}

component ScaleSystem 
{
  provides IScaleSystem pIScaleSystem;
  requires IScaleSystemProperties rIScaleSystemProperties;  
  requires ISerialProtocol rISerialProtocol;   
  requires ITimer rITimer;
  requires IDisplay rIDisplay;
  
  behaviour
  {
    enum State {Disabled, Stabilizing, Enabled, Initializing};   
    State state = State.Disabled;
    IScaleSystemProperties.intervalType timerInterval;

    [state.Disabled]
    {
      on pIScaleSystem.enable(): 
      {
        
        rIScaleSystemProperties.GetStabilizeInterval(timerInterval);
        rITimer.initializeOneShot(timerInterval);              
        state = State.Initializing;
      }
      on pIScaleSystem.disable(): {}    
    }
    [state.Initializing]
    {
      on pIScaleSystem.enable(): illegal;
      on pIScaleSystem.disable(): {rITimer.terminate(); state = State.Disabled; }
      on rITimer.expired(): state = State.Enabled;                  
    }
    [state.Enabled]
    {
      on pIScaleSystem.enable(): illegal;
      on pIScaleSystem.disable(): 
      {
        rITimer.terminate(); 
        rISerialProtocol.disable();
        state = State.Disabled;        
      }
      on rITimer.expired(): {rISerialProtocol.startRetrieveValue();}
      on rISerialProtocol.valueAvailable(value): 
      {
        rIDisplay.showValue(value);
        rITimer.initializeOneShot(timerInterval);        
      }
    }
    
  }  
 
}