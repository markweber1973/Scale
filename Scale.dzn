import SerialProtocolSystem.dzn;
import Timer.dzn;
import Display.dzn;
import ScaleSystemProperties.dzn;
import TareCompensator.dzn;

interface IScale
{
  in void enable();
  in void disable();
  in void tare();
  
  behaviour
  {
    enum State {Disabled, Enabled};
   
    State state = State.Disabled;
    [state.Disabled]
    {
      on enable: state = State.Enabled;
      on disable: {}
      on tare: {}
    }
    [state.Enabled]
    {
      on enable: illegal;
      on disable: state = State.Disabled;
      on tare: {}
    }
  }  
}

component Scale 
{
  provides IScale pIScaleSystem;
  requires IScaleSystemProperties rIScaleSystemProperties;  
  requires ISerialProtocol rISerialProtocol;   
  requires ITimer rITimer;
  requires IDisplay rIDisplay;
  requires ITareCompensator rITareCompensator;  
  
  behaviour
  {
    enum State {Disabled, Enabled, Initializing, WaitingForValue, WaitingForTareValue};   
    IScaleSystemProperties.intervalType timerInterval;
    State state = State.Disabled;
    [state.Disabled]
    {
      on pIScaleSystem.enable(): 
      {
        InitializeProtocol();               
        rISerialProtocol.startRetrieveValue();        
        state = State.Initializing;
      }
      on pIScaleSystem.disable(): {}
      on pIScaleSystem.tare(): {}   
      on rITimer.expired(): illegal;
    }
    [state.Initializing]
    {
      on pIScaleSystem.enable(): illegal;
      on pIScaleSystem.disable(): DisableScale();
      on pIScaleSystem.tare(): {}      
      on rISerialProtocol.valueAvailable(value):
      {
        rITareCompensator.SetTare(value);
        ShowNetWeight(value);        
        rIScaleSystemProperties.GetMeasureWeightInterval(timerInterval);        
        rITimer.initializeOneShot(timerInterval);
        state = State.Enabled;        
      }                    
      on rITimer.expired(): illegal;
    }
    [state.Enabled]
    {
      on pIScaleSystem.enable(): illegal;
      on pIScaleSystem.disable(): DisableScale();
      on rITimer.expired(): 
      {
        rISerialProtocol.startRetrieveValue();
        state = State.WaitingForValue;
      }     
      on pIScaleSystem.tare(): 
      {
        rITimer.terminate();
        rISerialProtocol.startRetrieveValue();
        state = State.WaitingForTareValue;
      }
      on rISerialProtocol.valueAvailable(value): {}      
    }
    [state.WaitingForValue]
    {
      on pIScaleSystem.enable(): illegal;
      on pIScaleSystem.disable(): DisableScale();
      on rISerialProtocol.valueAvailable(value): 
      {
        ShowNetWeight(value);
        rITimer.initializeOneShot(timerInterval);
        state = State.Enabled;                
      }
      on pIScaleSystem.tare(): 
      {
        state = State.WaitingForTareValue;
      }                  
    }    
    [state.WaitingForTareValue]
    {    
      on pIScaleSystem.enable(): illegal;
      on pIScaleSystem.disable(): DisableScale();
      on rISerialProtocol.valueAvailable(value): 
      {
        rITareCompensator.SetTare(value);        
        ShowNetWeight(value);
        rITimer.initializeOneShot(timerInterval);    
        state = State.Enabled;    
      }      
      on pIScaleSystem.tare(): {}            
    }
       
    void InitializeProtocol()
    {
      IScaleSystemProperties.PortNumber dataPortNr;
      IScaleSystemProperties.PortNumber clockPortNr;        
      rIScaleSystemProperties.GetDataPort(dataPortNr);
      rIScaleSystemProperties.GetClockPort(clockPortNr);
      rISerialProtocol.enable(clockPortNr, dataPortNr);   
    }  
    
    void DisableScale()
    {
        rISerialProtocol.disable();        
        rITimer.terminate(); 
        state = State.Disabled;             
    }  
    
    void ShowNetWeight(ITareCompensator.integer measuredValue)
    {
        ITareCompensator.integer netVal;
        rITareCompensator.GetNetWeight(measuredValue, netVal);
        rIDisplay.showValue(netVal);        
    }
  }    
}
