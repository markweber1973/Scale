 
interface IHardwareBinaryInput
{
  extern PortNr $int$;  
  enum BinaryState { High, Low };
	   
  in   BinaryState readCurrentState(PortNr port_nr);   	
  out  void risingEdgeDetected();
  out  void fallingEdgeDetected();

  behaviour
  {
    on optional:  {risingEdgeDetected;}
    on optional: {fallingEdgeDetected;}
    on readCurrentState: reply(BinaryState.High);		
    on readCurrentState: reply(BinaryState.Low);       
  }
}

interface ILogicalBinaryInput
{
  extern PortNr $int$;  
  enum LogicalState { High, Low, NotInitialised};	
      
  in LogicalState initialize(PortNr port_nr);
  in void terminate();  
  in LogicalState readCurrentState();
  out void risingEdge();
  out void fallingEdge();  

  behaviour
  {
    enum OperationalState { NotInitialised, Initialised};
    OperationalState operationalState = OperationalState.NotInitialised; 
    [operationalState.NotInitialised]
    {
      on readCurrentState: reply(LogicalState.NotInitialised);
      on initialize: {operationalState = OperationalState.Initialised; reply(LogicalState.Low);}
      on initialize: {operationalState = OperationalState.Initialised; reply(LogicalState.High);}      
      on terminate:  illegal;             		
    }
    [operationalState.Initialised]
    {
      on readCurrentState: reply(LogicalState.High);    
      on readCurrentState: reply(LogicalState.Low);
      on initialize: illegal;
      on terminate: {operationalState = OperationalState.NotInitialised;}                 

      on optional:  { risingEdge;}       
      on optional:  { fallingEdge;}
    }       
  }
}

component LogicalBinaryInput
{
  provides ILogicalBinaryInput 	logicalInput;
  requires IHardwareBinaryInput binaryInput;
  
  behaviour
  {
    ILogicalBinaryInput.LogicalState state = ILogicalBinaryInput.LogicalState.NotInitialised;
    [state.NotInitialised]
    {
      on binaryInput.risingEdgeDetected(): {state = ILogicalBinaryInput.LogicalState.NotInitialised;}
      on binaryInput.fallingEdgeDetected(): {state = ILogicalBinaryInput.LogicalState.NotInitialised;}
      on logicalInput.readCurrentState():	reply(ILogicalBinaryInput.LogicalState.NotInitialised);
      on logicalInput.initialize(port_nr): { initializeFromHardware(port_nr); }
      on logicalInput.terminate(): illegal;    	
    }
    [state.High]
    {
      on binaryInput.risingEdgeDetected(): { }
      on binaryInput.fallingEdgeDetected(): {state = ILogicalBinaryInput.LogicalState.Low; logicalInput.fallingEdge();}
      on logicalInput.readCurrentState():	reply(ILogicalBinaryInput.LogicalState.High);
      on logicalInput.initialize(): illegal;
      on logicalInput.terminate(): {state = ILogicalBinaryInput.LogicalState.NotInitialised;}
    }
    [state.Low]
    {
    	on binaryInput.risingEdgeDetected(): {state = ILogicalBinaryInput.LogicalState.High; logicalInput.risingEdge();}
    	on binaryInput.fallingEdgeDetected(): { }
    	on logicalInput.readCurrentState():	reply(ILogicalBinaryInput.LogicalState.Low);
    	on logicalInput.initialize(): illegal;
      on logicalInput.terminate(): {state = ILogicalBinaryInput.LogicalState.NotInitialised;}    	
    }
     
    void initializeFromHardware(ILogicalBinaryInput.PortNr port_nr)
    {
      IHardwareBinaryInput.BinaryState s = binaryInput.readCurrentState(port_nr);
      if (s == IHardwareBinaryInput.BinaryState.High) 
      {
      	state = ILogicalBinaryInput.LogicalState.High;
      	reply(ILogicalBinaryInput.LogicalState.High);
      }
      else
      { 
      	state = ILogicalBinaryInput.LogicalState.Low;
      	reply(ILogicalBinaryInput.LogicalState.Low);      	
      }
    }
  }	
}
